# Test, Release
# Adapted from https://github.com/maxwellpollack/juce-plugin-ci

name: Test and Release

on: [push, pull_request]

env:
  PROJECT_NAME: Os251
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.9.0
  BUILD_TYPE: Release
  CCACHE_VERSION: 3.7.7

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - if: ${{ runner.os == 'Linux' }}
      name: Install JUCE dependencies (Linux only)
      id: juce_dependencies
      run: | 
        sudo apt-get update
        sudo apt-get install -y g++ libgtk-3-dev libfreetype6-dev libx11-dev libxinerama-dev libxrandr-dev libxcursor-dev mesa-common-dev libasound2-dev freeglut3-dev libxcomposite-dev libcurl4-openssl-dev
        sudo add-apt-repository -y ppa:webkit-team && sudo apt-get update
        sudo apt-get install libwebkit2gtk-4.0-37 libwebkit2gtk-4.0-dev
    - name: Download Ninja and CMake
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})
        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "Darwin-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
        endif()
        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-output name=cmake_dir::${cmake_dir}")
        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()
    - name: Download ccache
      id: ccache
      shell: cmake -P {0}
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: ccache cache files
      uses: actions/cache@v1.1.0
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-
    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Build UI
      working-directory: ./src/jsui
      run: |
        npm install
        npm run build
    
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        execute_process(
          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=ninja
            -D CMAKE_C_COMPILER_LAUNCHER=ccache
            -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        set(ENV{CCACHE_COMPRESS} "true")
        set(ENV{CCACHE_COMPRESSLEVEL} "6")
        set(ENV{CCACHE_MAXSIZE} "400M")
        if ("${{ matrix.config.cxx }}" STREQUAL "cl")
          set(ENV{CCACHE_MAXSIZE} "600M")
        endif()
        execute_process(COMMAND ccache -p)
        execute_process(COMMAND ccache -z)
        execute_process(
          COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        execute_process(COMMAND ccache -s)
    - if: ${{ runner.os=='Windows' }}
      name: Run Tests (Windows)
      run: |
        & .\build\tests\${Env:PROJECT_NAME}_Tests.exe
    - if: ${{ runner.os!='Windows' }}
      name: Run Tests (Unix)
      run: |
        ./build/tests/${PROJECT_NAME}_Tests
    - if: ${{ runner.os=='Windows' }}
      name: Run Benchmark (Windows)
      run: |
        & .\build\benchmark\${Env:PROJECT_NAME}_Benchmark_artefacts\${Env:BUILD_TYPE}\${Env:PROJECT_NAME}_Benchmark.exe
    - if: ${{ runner.os!='Windows' }}
      name: Run Benchmark (Unix)
      run: |
        ./build/benchmark/${PROJECT_NAME}_Benchmark_artefacts/${BUILD_TYPE}/${PROJECT_NAME}_Benchmark
    - if: ${{ runner.os=='macOS' }}
      name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        # The certificates in a PKCS12 file encoded as a base64 string
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
        # The password used to import the PKCS12 file.
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
    - if: ${{ runner.os=='macOS' }}
      name: Install gon via HomeBrew for code signing and app notarization
      run: |
        brew tap mitchellh/gon
        brew install mitchellh/gon/gon
    - if: ${{ runner.os=='macOS' }}
      name: Sign the mac binaries with Gon
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      run: |
        gon -log-level=debug -log-json ./gon.json
    - if: ${{ runner.os=='Windows' }}
      name: Pack (Windows)
      run: |
        mkdir ${{ github.event.repository.name }}-${{ runner.os }}
        cd build\src\*_artefacts\Release
        del *.*
        move * ..\..\..\..\${{ github.event.repository.name }}-${{ runner.os }}
        cd ..\..\..\..
        cmake -E tar cvf ${{ github.event.repository.name }}-${{ runner.os }}.zip --format=zip -- ${{ github.event.repository.name }}-${{ runner.os }}
    - if: ${{ runner.os=='Linux' }}
      name: Pack (Linux)
      run: |
        mkdir -p ${{ github.event.repository.name }}-${{ runner.os }}
        cd build/src/*_artefacts/Release
        rm *.*
        mv * ../../../../${{ github.event.repository.name }}-${{ runner.os }}
        cd ../../../..
        cmake -E tar cvf ${{ github.event.repository.name }}-${{ runner.os }}.zip --format=zip -- ${{ github.event.repository.name }}-${{ runner.os }}
    - if: ${{ runner.os!='macOS' }}
      name: Upload (Windows and Linux)
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ runner.os }}
        path: ${{ github.event.repository.name }}-${{ runner.os }}.zip
    - if: ${{ runner.os=='macOS' }}
      name: Upload (macOS)
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ runner.os }}
        path: ${{ github.event.repository.name }}-${{ runner.os }}.dmg

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: Publish ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows",
            os: ubuntu-latest,
            extention: "zip", contenttype: "application/zip"
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux",
            os: ubuntu-latest,
            extention: "zip", contenttype: "application/zip"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS",
            os: ubuntu-latest,
            extention: "dmg", contenttype: "application/octet-stream"
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ github.event.repository.name }}-${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./

    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}-${{ matrix.config.artifact }}.${{ matrix.config.extention }}
        asset_name: ${{ github.event.repository.name }}-${{ matrix.config.artifact }}.${{ matrix.config.extention }}
        asset_content_type: ${{ matrix.config.contenttype }}
